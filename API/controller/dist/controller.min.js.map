{"version":3,"sources":["controller.js"],"names":["router","require","Router","FeedBack","Card","FoodFav","Register","req","res","name","quantity","price","newCart","regeneratorRuntime","async","_context","prev","next","log","body","num","calculatedPrice","post","Cart","awrap","save","sent","abrupt","send","status","message","t0","console","stop","get","response","_context2","find","data","ok","orderId","reviewOn","suggestion","complaint","rate","newFeedBack","_context3","Number","_context4","userId","deliveryAddress","city","locationType","floor","apartmentNo","landMark","companyName","department","instruct","newAddress","_context5","_context6","Address","cardType","cardNumber","nameOnCard","expiryDate","uri","newCard","_context7","ExpiryDate","_context8","route","_context9","params","uID","findOneAndDelete","then","err","error","image","newFav","_context10","_context11","salutation","contactno","dateofbirth","email","password","confirmpassword","newRegister","_context12","moment","format","_context13","EM","pass","_context14","findOne","user","register"],"mappings":"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","file":"controller.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst FeedBack = require(\"../model/feedback\");\r\nconst Address = require(\"../model/address\");\r\nconst Card = require(\"../model/card\");\r\nconst Cart = require(\"../model/cart\")\r\nconst FoodFav = require(\"../model/foodFav\")\r\n\r\nconst Register = require(\"../model/register\")\r\nconst moment = require('moment');\r\n\r\n//kaveen\r\n//to add items to cart\r\nrouter.post(\"/addToCart\", async (req, res) => {\r\n\r\n    console.log(\"data for cart\", req.body)\r\n\r\n    const name = req.body.name;\r\n    const quantity = req.body.num;\r\n    const price = req.body.calculatedPrice;\r\n\r\n    const newCart = new Cart({\r\n        name, quantity, price\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newCart.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"item added for cart\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"failed to add item record\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n    }\r\n})\r\n\r\n//to retrieve data from db\r\nrouter.get(\"/cart\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Cart.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\n\r\n//Hasani\r\n//to add a new feedback\r\n\r\nrouter.post(\"/addAReview\", async (req, res) => {\r\n\r\n    console.log(\"data for feedback\", req.body)\r\n\r\n    const orderId = req.body.orderId;\r\n    const reviewOn = req.body.reviewOn;\r\n    const suggestion = req.body.suggestion;\r\n    const complaint = req.body.complaint;\r\n    const rate = Number(req.body.rate);\r\n\r\n\r\n    const newFeedBack = new FeedBack({\r\n        orderId, reviewOn, suggestion, complaint, rate\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newFeedBack.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: \"New FeedBack Saved\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"FeedBack could not be saved\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err);\r\n        return res.status(500).send({ status: \"FeedBack could not be saved\" })\r\n    }\r\n})\r\n\r\n//to retrieve all feedbacks from db\r\nrouter.get(\"/getReview\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await FeedBack.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\n//to add a new delivery Address\r\n\r\nrouter.post(\"/addAddress\", async (req, res) => {\r\n\r\n    console.log(\"data for address\", req.body)\r\n\r\n    const userId = req.body.userId;\r\n    const deliveryAddress = req.body.deliveryAddress;\r\n    const city = req.body.city;\r\n    const locationType = req.body.locationType;\r\n    const floor = req.body.floor;\r\n    const apartmentNo = req.body.apartmentNo;\r\n    const landMark = req.body.landMark;\r\n    const companyName = req.body.companyName;\r\n    const department = req.body.department;\r\n    const instruct = req.body.instruct;\r\n\r\n\r\n    const newAddress = new Address({\r\n        userId, deliveryAddress, city, locationType, floor, apartmentNo, landMark, companyName, department, instruct\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newAddress.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: \"New Delivery Address Successfully Saved\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"Delivery Address could not be saved\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        return res.status(500).send({ status: \"Delivery Address could not be saved\" });\r\n    }\r\n})\r\n\r\n//to retrieve list of delivery Addresses from db\r\nrouter.get(\"/getAddress\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Address.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\n//to add a new card\r\n\r\nrouter.post(\"/addACard\", async (req, res) => {\r\n\r\n    console.log(\"data for card\", req.body)\r\n    const userId = req.body.userId;\r\n    const cardType = req.body.cardType;\r\n    const cardNumber = req.body.cardNumber;\r\n    const nameOnCard = req.body.nameOnCard;\r\n    const expiryDate = req.body.ExpiryDate;\r\n    const uri = req.body.uri;\r\n\r\n    const newCard = new Card({\r\n        userId, cardType, cardNumber, nameOnCard, expiryDate, uri\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newCard.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: \"New Card Saved\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"Card could not be saved\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err);\r\n        return res.status(500).send({ status: \"Card could not be saved\" })\r\n\r\n    }\r\n})\r\n\r\n//to retrieve all cards from db\r\nrouter.get(\"/getCards\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Card.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\n//To delete a card\r\nrouter.route(\"/removeCard/:uID\").delete(async (req, res) => {\r\n\r\n    let userId = req.params.uID;//userId passed from card\r\n\r\n    await Card.findOneAndDelete({ userId: userId })\r\n        .then(() => {\r\n            res.status(200).send({ status: \"Card deleted\" });\r\n        }).catch(() => {\r\n            console.log(err);\r\n            res.status(500).send({ status: \"Error with deleting a card\", error: err.message });\r\n        })\r\n\r\n})\r\n\r\n//Devin\r\n//add food item to favourite list\r\nrouter.post(\"/addToFav\", async (req, res) => {\r\n\r\n    console.log(\"data for Favourite\", req.body)\r\n\r\n    const name = req.body.name;\r\n    const quantity = req.body.num;\r\n    const price = req.body.price;\r\n    const image = req.body.image;\r\n\r\n    const newFav = new FoodFav({\r\n        name, quantity, price, image\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newFav.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: \"item added for fAVOURITE\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"failed to add item record\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n    }\r\n})\r\n\r\n//to retrieve data from db\r\nrouter.get(\"/FavList\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await FoodFav.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\n\r\n//Thisara\r\nrouter.post(\"/addRegister\", async (req, res) => {\r\n\r\n\r\n    console.log(\"data for register\", req.body)\r\n\r\n    const salutation = req.body.salutation;\r\n    const name = req.body.name;\r\n    const contactno = Number(req.body.contactno);\r\n    const dateofbirth = moment(req.body.dateofbirth).format('YYYY-MMMM-DD');\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    const confirmpassword = req.body.confirmpassword;\r\n\r\n    const newRegister = new Register({\r\n        salutation, name, contactno, dateofbirth, email, password, confirmpassword\r\n    })\r\n\r\n    try {\r\n        let response = await newRegister.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"Register to the system successfully\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"Try again\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        return res.status(500).send({ status: \"User Already Register to MC Delivery App\" })\r\n\r\n    }\r\n})\r\n\r\nrouter.get(\"/getRegister\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Register.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\nrouter.get(\"/get/:email/:pass\", async (req, res) => {\r\n    let EM = req.params.email;//username taken from the frontend login form\r\n    let pass = req.params.pass;//password taken from the frontend login form\r\n\r\n     const user = await Register.findOne({ email: EM, password: pass })\r\n        .then((user) => {\r\n            console.log(\"dataaaaaaa\", user)\r\n            res.status(200).send({ status: \"User fetched\", register: user })\r\n        }).catch(() => {\r\n            console.log(err.message);\r\n            res.status(500).send({ status: \"Error with get user\", error: err.message });\r\n        })\r\n})\r\n\r\n\r\n\r\nmodule.exports = router;\r\n"]}