{"version":3,"sources":["controller.js"],"names":["router","require","Router","Cart","moment","Register","req","res","name","quantity","price","newCart","regeneratorRuntime","async","_context","prev","next","log","body","post","num","calculatedPrice","awrap","sent","abrupt","status","send","message","t0","console","stop","get","response","find","data","salutation","contactno","dateofbirth","email","password","confirmpassword","newRegister","_context3","Number","format","save","_context4","ok","EM","pass","_context5","params","findOne","then","user","register","err","error","module","exports"],"mappings":"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","file":"controller.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst Cart = require(\"../model/cart\")\r\nconst Register = require(\"../model/register\") \r\nconst moment = require('moment');\r\n//to add items to cart{\r\n\r\nrouter.post(\"/addToCart\", async (req, res) => {\r\n\r\n    console.log(\"data for cart\", req.body)\r\n\r\n    const name = req.body.name;\r\n    const quantity = req.body.num;\r\n    const price = req.body.calculatedPrice;\r\n\r\n    const newCart = new Cart({\r\n        name, quantity, price\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newCart.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"item added for cart\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"failed to add item record\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n    }\r\n})\r\n\r\n//to retrieve data from db\r\nrouter.get(\"/cart\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Cart.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\nrouter.post(\"/addRegister\", async (req, res) => {\r\n\r\n    console.log(\"data for register\", req.body)\r\n\r\n    const salutation = req.body.salutation;\r\n    const name = req.body.name;\r\n    const contactno = Number(req.body.contactno);\r\n    const dateofbirth =  moment(req.body.dateofbirth).format('YYYY-MMMM-DD');\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    const confirmpassword = req.body.confirmpassword;\r\n\r\n    const newRegister = new Register({\r\n        salutation, name, contactno, dateofbirth, email, password, confirmpassword\r\n    })\r\n\r\n    try {\r\n        let response = await newRegister.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"Register to the system successfully\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"Try again\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        return res.status(500).send({ status: \"User Already Register to MC Delivery App\" })\r\n    }\r\n})\r\n\r\nrouter.get(\"/getRegister\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Register.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\nrouter.get(\"/get/:email/:pass\", async (req, res) => {\r\n    let EM = req.params.email;//username taken from the frontend login form\r\n    let pass = req.params.pass;//password taken from the frontend login form\r\n\r\n     const user = await Register.findOne({ email: EM, password: pass })\r\n        .then((user) => {\r\n            console.log(\"dataaaaaaa\", user)\r\n            res.status(200).send({ status: \"User fetched\", register: user })\r\n        }).catch(() => {\r\n            console.log(err.message);\r\n            res.status(500).send({ status: \"Error with get user\", error: err.message });\r\n        })\r\n})\r\n\r\n\r\nmodule.exports = router;"]}