{"version":3,"sources":["controller.js"],"names":["router","require","Router","Cart","Register","moment","post","req","res","console","log","body","name","quantity","num","price","calculatedPrice","newCart","save","response","status","send","message","get","find","data","ok","salutation","contactno","Number","dateofbirth","format","email","password","confirmpassword","newRegister","EM","params","pass","findOne","then","user","register","err","error","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst Cart = require(\"../model/cart\")\r\nconst Register = require(\"../model/register\") \r\nconst moment = require('moment');\r\n//to add items to cart{\r\n\r\nrouter.post(\"/addToCart\", async (req, res) => {\r\n\r\n    console.log(\"data for cart\", req.body)\r\n\r\n    const name = req.body.name;\r\n    const quantity = req.body.num;\r\n    const price = req.body.calculatedPrice;\r\n\r\n    const newCart = new Cart({\r\n        name, quantity, price\r\n    })\r\n\r\n    try {\r\n\r\n        let response = await newCart.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"item added for cart\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"failed to add item record\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n    }\r\n})\r\n\r\n//to retrieve data from db\r\nrouter.get(\"/cart\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Cart.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\nrouter.post(\"/addRegister\", async (req, res) => {\r\n\r\n    console.log(\"data for register\", req.body)\r\n\r\n    const salutation = req.body.salutation;\r\n    const name = req.body.name;\r\n    const contactno = Number(req.body.contactno);\r\n    const dateofbirth =  moment(req.body.dateofbirth).format('YYYY-MMMM-DD');\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    const confirmpassword = req.body.confirmpassword;\r\n\r\n    const newRegister = new Register({\r\n        salutation, name, contactno, dateofbirth, email, password, confirmpassword\r\n    })\r\n\r\n    try {\r\n        let response = await newRegister.save();\r\n        if (response) {\r\n            return res.status(201).send({ status: true, message: \"Register to the system successfully\" })\r\n        } else {\r\n            return res.status(500).send({ status: \"Try again\" })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        return res.status(500).send({ status: \"User Already Register to MC Delivery App\" })\r\n    }\r\n})\r\n\r\nrouter.get(\"/getRegister\", async (req, res) => {\r\n\r\n    try {\r\n        const response = await Register.find();\r\n        return res.status(200).send({ status: \"Success\", data: response });\r\n    } catch (error) {\r\n        console.log(\"Something went wrong while connecting to DB\");\r\n        return { ok: false };\r\n    }\r\n\r\n});\r\n\r\nrouter.get(\"/get/:email/:pass\", async (req, res) => {\r\n    let EM = req.params.email;//username taken from the frontend login form\r\n    let pass = req.params.pass;//password taken from the frontend login form\r\n\r\n     const user = await Register.findOne({ email: EM, password: pass })\r\n        .then((user) => {\r\n            console.log(\"dataaaaaaa\", user)\r\n            res.status(200).send({ status: \"User fetched\", register: user })\r\n        }).catch(() => {\r\n            console.log(err.message);\r\n            res.status(500).send({ status: \"Error with get user\", error: err.message });\r\n        })\r\n})\r\n\r\n\r\nmodule.exports = router;"],"file":"controller.dev.js"}